#!/bin/bash
# handles basic system startup.
# note that services to be started are handled by different file, imported here.
# #####

session_startfile="$HOME/.session-startuplist"
logdir="$CUSTOM_LOGDIR"
SELF=".common_startup"
################################################

#### ENTRY ####
# import common:
if ! type __COMMONS_LOADED_MARKER > /dev/null 2>&1; then
    if [[ -r "$_SCRIPTS_COMMONS" ]]; then
        source "$_SCRIPTS_COMMONS"
    else
        echo -e "\nError: common file \"$_SCRIPTS_COMMONS\" not found! Abort."
        # do not exit!
        #exit 1
    fi
fi

################################################
# enables offline SMART checks on system drives
function enableSmart() {
    local _disk_list _disk _status msg disk_check

    check_progs_installed /usr/sbin/smartctl || return 1

    _disk_list="$(sudo smartctl --scan)"
    _status="$?"
    _disk_list="$(echo "$_disk_list" | cut -d' ' -f1 | uniq | sort)"

    if [[ "$_status" -ne 0 ]]; then
        msg="smartctl --scan returned exit code $_status"
        err_display "$msg" "$SELF"
        #log "$msg" "$error_log"
        #mail_error_report_and_log "$SELF: unable to scan drives with smartctl --scan on $HOSTNAME" "$msg" "$error_log"
    elif [[ -z "$_disk_list" ]]; then
        msg="no disks returned from \"sudo smartctl --scan\" command."
        err_display "$msg" "$SELF"
        #log "$SELF" "$error_log"
        #mail_error_report_and_log "$SELF: no disks found using smartctl on $HOSTNAME." "$msg" "$error_log"
    fi

    for _disk in $_disk_list; do
        disk_check="$(echo "$_disk" | sed 's/.*\///')" # strip everything before last slash (included)

        # Check whether user given disk is listed in /proc/partitions; if not, send error:
        if grep -Fq "$disk_check" /proc/partitions; then
            #	-s on	enables SMART on device (off would disable); should be somewhere in machine startup script, like rc.local;
            #	-S on	enables autosave of device vendor-specific attributes
            #	-o on	turns on offline data collection every 4 hours
            sudo smartctl -s on -o on -S on "$_disk"
            _status="$?"

            if [[ "$_status" -ne 0 ]]; then
                msg="unable to enable SMART on $_disk"
                err_display "$msg" "$SELF"
                #log "$msg" "$error_log"
                #mail_error_report_and_log "$SELF: unable to enable SMART on $HOSTNAME." "$msg" "$error_log"
            fi
        else
            msg="The disk \"$_disk\" has beed passed to me via
    \"sudo smartctl --scan\" command, but it cannot be located in
    /proc/partitions. Unmounted/mismounted volume perhaps?"
            err_display "$msg" "$SELF"
            #log "$msg" "$error_log"
            #mail_error_report_and_log "invalid drive detected on $HOSTNAME" "$msg" "$error_log"
        fi
    done
}
################################################

xrandr --output DP-2 --auto --right-of DP-1 &

# Load bitmap fonts:
xset +fp ~/.fonts
xset fp rehash
#sleep 1

# Set default cursor
#xsetroot -cursor_name left_ptr

# Load the Xresources database:
[[ -r ~/.Xresources ]] && xrdb -merge ~/.Xresources # Do not background!

# disable system beep:
xset -b &

# Start the programs/scripts in $session_startfile:
if [[ -r "$session_startfile" ]]; then
    source "$session_startfile" &
    # give some time before wm is launched:
    sleep 3
else
    if command -v rxvt-unicode; then
        rxvt-unicode &
    else
        xterm &
    fi
fi

## Start gpg-agent daemon
#if [[ -x /usr/bin/gpg-agent ]]; then
#kill $(ps ux | awk '/gpg-agent/ && !/awk/ {print $2}') >/dev/null 2>&1
#fi
#if [[ -x /usr/bin/gpg-agent ]]; then
#eval "$(/usr/bin/gpg-agent --daemon)"
#fi

# Check whether logfolder at /var/log and /data/ dir are existing:
for i in $logdir /data/; do
    if [[ ! -w "$i" ]]; then
        err_display  "$i is not created or no write permissions granted. Do it!" "$SELF" &
    fi
done &

# Create necessary directories if don't exist:
for i in /data/.rsync "$_PERSISTED_TMP"; do
    if [[ ! -d "$i" ]] && ! mkdir "$i"; then
        err_display  "Tried to create required directory \"$i\" but mkdir failed." "$SELF" &
    fi
done &

#TODO: this stuff needs to be done via logrotate perhaps?
# Check the filesize in MB of logs dir:
allowed_size="20"   # Max size in MB
check_max_allowed_size "$logdir" "$allowed_size"

enableSmart &

unset i
