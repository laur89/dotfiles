# sample file:
# http://www.gnu.org/software/bash/manual/html_node/Sample-Init-File.html#Sample-Init-File
#
# consider also:
#   https://unix.stackexchange.com/a/234037/47501
# see also:
#   https://wiki.archlinux.org/index.php/Readline
# vi-mode cheat-sheet: https://catonmat.net/ftp/bash-vi-editing-mode-cheat-sheet.pdf
#################################
$include /etc/inputrc

# vi mode:  # can't set vi-mode here, as it fucks up fzf; set it in .bashrc instead
#set editing-mode vi

$if mode=vi
# Keymaps for when we're in command mode (e.g., after hitting ESC):
set keymap vi-command

# these are for vi-command mode
"\e[A": history-search-backward
"\e[B": history-search-forward
j: history-search-forward
k: history-search-backward
# Keymaps for when we're in insert (i.e., typing stuff in) mode:
set keymap vi-insert

# these are for vi-insert mode
"\e[A": history-search-backward
"\e[B": history-search-forward
$endif


# Enable Readline waiting less for additional input when a key is pressed.
# Otherwise eg exiting from insert mode will have a delay on prompt indicator:
# (from https://unix.stackexchange.com/questions/318433)
set keyseq-timeout 50

# Ignore case on tab auto-completion
set completion-ignore-case on

# use a visible bell if one is available
set bell-style visible

set meta-flag on

# don't strip characters to 7 bits when reading
set input-meta on

# allow iso-latin1 characters to be inserted rather
# than converted to prefix-meta sequences
set convert-meta off

# display characters with the eighth bit set directly
# rather than as meta-prefixed characters
set output-meta on

# if there are more than 150 possible completions for
# a word, ask the user if he wants to see all of them
set completion-query-items 150

# add char to beginning of prompt indicating editing mode (: for vi comm, + for vi insert mode);
set show-mode-in-prompt on
set vi-cmd-mode-string "\1\e[0;37m\2\342\224\224\342\224\200\342\224\200\342\225\274 \1\e[1;31m\2: \1\e[0m\2\1\e[2 q\2"
set vi-ins-mode-string "\1\e[0;37m\2\342\224\224\342\224\200\342\224\200\342\225\274 \1\e[1;32m\2+ \1\e[0m\2\1\e[6 q\2"

# auto-completion opts:
set show-all-if-ambiguous on
set show-all-if-unmodified on

# do not auto-execute pasted command, even if it contains newline:
set enable-bracketed-paste on

# Color files by types
# Note that this may cause completion text blink in some terminals (e.g. xterm).
set colored-stats on
# Show extra file information when completing, like `ls -F` does
set visible-stats on
# Immediately add a trailing slash when autocompleting symlinks to directories
set mark-symlinked-directories on
# Color the common prefix
set colored-completion-prefix on
# Color the common prefix in menu-complete
set menu-complete-display-prefix on
# do not echo ctrl chars, e.g. ^C after ctrl+c is pressed:
set echo-control-characters off

# Be more intelligent when autocompleting by also looking at the text after
# the cursor. For example, when the current line is "cd ~/src/mozil", and
# the cursor is on the "z", pressing Tab will not autocomplete it to "cd
# ~/src/mozillail", but to "cd ~/src/mozilla". (This is supported by the
# Readline used by Bash 4.)
set skip-completed-text on

# Macros:
# Ctrl+Alt+i to append '|less' to current line: (does not work in vi mode? (C-e bit does not quite work?)
#"\e\C-i": "\C-e | less\C-m"
# Ctrl+Alt+B send command to background, discarding all output:
#"\e\C-b": "\C-e > /dev/null 2>&1 &\C-m"


# Insert the arguments from the last command
#"p": "i !!*\r"


# Ctrl left/right to move by words: (note ctrl+left|right conflicts urxvt tab shortcuts)
#"\e[1;5D": backward-word
#"\e[1;5C": forward-word

# Needed because binding 'p' in command mode above wipes its insert mode
# function, too. This fixes that, and will insert 'p' when you type 'p'.
#"p": self-insert
