#!/bin/bash
# Will be executed by ~/.xinitrc
# and will in turn execute $session_startfile

# ==============================
# env vars import has to be the first thing:
if [[ "$__ENV_VARS_LOADED_MARKER_VAR" != "loaded" ]]; then
    _global_env_var_loc='/etc/.bash_env_vars'

    if [[ -r "$_global_env_var_loc" ]]; then
        source "$_global_env_var_loc"
    else
        echo -e "\nError: env vars file \"$_global_env_var_loc\" not found! Abort."
        exit 1
    fi
fi
####
# import common:
if ! type __COMMONS_LOADED_MARKER > /dev/null 2>&1; then
    if [[ -r "$_SCRIPTS_COMMONS" ]]; then
        source "$_SCRIPTS_COMMONS"
    else
        echo -e "\nError: common file \"$_SCRIPTS_COMMONS\" not found! Abort."
        exit 1
    fi
fi
# ==============================

# skip, if dwm is already running:
if [[ "$(ps -e | grep "\bdwm\b")" ]]; then
    echo "dwm appears to be already running. abort."
    exit 1
fi

# !! removed this at 04.01.15; if some access issues, then prolly because of this;
#if test -z "$DBUS_SESSION_BUS_ADDRESS"; then
    #eval `dbus-launch --sh-syntax --exit-with-session`
#fi
# ---------------------------------------------------------------
# Draw the status bar:
#while true; do
#    python3 /home/laur/Documents/comp/DWM/bars/py_bar.py
#    sleep 1        # Sleep is currently provided by the py script itself
#done &
# enda py bar:

#python3 $HOME/.dwm/bars/py_bar.py &
# dzen2 setup:
$HOME/.dwm/bars/w0ng_bash/dwm_statusbar &
__bar_pid=$!
disown

# spoof window manager, so java apps would recognize it:
wmname LG3D &

# loop, so exiting dwm actually restarts it without exiting clients;
# (pointless if using restart patch):
#while true; do
    # Log stderror to a file:
    dwm 2>  $CUSTOM_LOGDIR/dwm.log
    #kill_pids "$__bar_pid"
    killall dwm_statusbar && sleep 3 && killall -KILL dwm_statusbar
    # No error logging:
    #dwm >/dev/null 2>&1
#done
