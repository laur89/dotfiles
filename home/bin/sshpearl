#!/usr/bin/env bash
#
# This file is part of Pearl (https://github.com/fsquillace/pearl-ssh).
#
# Copyright (c) 2008-2015
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# #########################################
# This is a slightly modified version of the original ssh_pearl:
# it calls the ssh_pearl function with passed arguments; that way it can be invoked
# by other scripts. It also forces the TERM env var.

SELF="$(basename "$0")"

function ssh_pearl() {
    local self rcScript inputrcScript vimrcScript ssh_opts opt commands arg commands_opt cmd

    commands=()
    ssh_opts=()

    function _aggregate_scripts() {
        local fileRc dirRc

        fileRc="$1"
        dirRc="$2"
        [[ -f "${fileRc}" ]] && cat "${fileRc}"
        [[ -d "${dirRc}" ]] && cat "${dirRc}"/*
    }

    [[ -z "$@" ]] && { ssh; return $?; }

    for opt in "$@"; do
        case "$opt" in
            --) shift ; break ;;
            *) ssh_opts+=("$opt") ; shift ;;
        esac
    done

    for arg in "$@"; do
        commands+=("$arg")
    done

    [[ -n "${commands[@]}" ]] && commands_opt="-c '${commands[*]}'"

    command -v base64 >/dev/null 2>&1 || { echo >&2 "pearl-ssh requires base64 to be installed locally. Aborting."; return 1; }
    command -v gzip >/dev/null 2>&1 || { echo >&2 "pearl-ssh requires gzip to be installed locally. Aborting."; return 1; }

    [[ -z "$PEARL_HOME" ]] && PEARL_HOME=${HOME}/.config/pearl

    rcScript="$(_aggregate_scripts "$PEARL_HOME/bashrc" "$PEARL_HOME/bashrc.d" | gzip | base64)"
    inputrcScript="$(_aggregate_scripts "$PEARL_HOME/inputrc" "$PEARL_HOME/inputrc.d" | gzip | base64)"
    vimrcScript="$(_aggregate_scripts "$PEARL_HOME/vimrc" "$PEARL_HOME/vimrc.d" | gzip | base64)"
    self="$(gzip < "$0" | base64)"

    cmd="
        for tmpDir in /tmp \$HOME; do [[ -w \"\$tmpDir\" ]] && { foundTmpDir=\"\$tmpDir\"; break; } done
        [[ -z \"\$foundTmpDir\" ]] && { echo >&2 \"couldn't find writable tempdirs on the server. Aborting.\"; exit 1; };
        command -v base64 >/dev/null 2>&1 || { echo >&2 \"pearl-ssh requires base64 to be installed on the server. Aborting.\"; exit 1; };
        command -v gunzip >/dev/null 2>&1 || { echo >&2 \"pearl-ssh requires gunzip to be installed on the server. Aborting.\"; exit 1; };
        PEARLSSH_HOME=\"\$(mktemp -d pearl-XXXXX -p \"\$foundTmpDir\")\";
        PEARLSSH_BIN=\"\$(mktemp -d pearl-bin-XXXXX -p \"\$PEARLSSH_HOME\")\";
        export PEARL_HOME=\"\$PEARLSSH_HOME\";
        trap \"rm -rf \"\$PEARLSSH_HOME\"; exit\" EXIT HUP INT QUIT PIPE TERM;
        echo \"${rcScript}\" | base64 -di | gunzip > \"\${PEARLSSH_HOME}/bashrc\";
        echo \"${inputrcScript}\" | base64 -di | gunzip > \"\${PEARLSSH_HOME}/inputrc\";
        echo \"${vimrcScript}\" | base64 -di | gunzip > \"\${PEARLSSH_HOME}/vimrc\";
        echo \"${self}\" | base64 -di | gunzip > \"\${PEARLSSH_BIN}/$SELF\";
        chmod -R +x \"\$PEARLSSH_BIN\";
        export PATH=\$PATH:\$PEARLSSH_BIN;

        # increments the number of dashes to be ued in PS1 env var to indicate
        # the ssh-ing depth, as in how deep in ssh-sessions are we:
        export _SSH_PEARL_DEPTH_DASHES=${_SSH_PEARL_DEPTH_DASHES}-

        ## logic to provide going root with the same shell config:
        if ! grep -q 'pearl-ssh local function additions.*overrides' \"\${PEARLSSH_HOME}/bashrc\"; then
            echo -e \"# pearl-ssh local function additions/overrides:\\nunalias gosu >/dev/null 2>/dev/null\" >> \"\${PEARLSSH_HOME}/bashrc\"
        fi

        # delete previous gosu() alias definition:
        sed -i '/^gosu().*VIMINIT.*bash/d' \"\${PEARLSSH_HOME}/bashrc\"
        echo -e \"gosu() { VIMINIT=\\\"let \\\\\\\$MYVIMRC='\${PEARLSSH_HOME}/vimrc' | source \\\\\\\$MYVIMRC\\\" INPUTRC=\\\"\${PEARLSSH_HOME}/inputrc\\\" sudo -E bash --rcfile \\\"\${PEARLSSH_HOME}/bashrc\\\" -i ${commands_opt}; }\" >> \"\${PEARLSSH_HOME}/bashrc\"

        # entry:
        VIMINIT=\"let \\\$MYVIMRC='\${PEARLSSH_HOME}/vimrc' | source \\\$MYVIMRC\" INPUTRC=\"\${PEARLSSH_HOME}/inputrc\" bash --rcfile \"\${PEARLSSH_HOME}/bashrc\" -i ${commands_opt};


    "
    # see töötab kui tahta command var-i salvestada:
    #rr="eval VIMINIT=\"let \\\$MYVIMRC='/tmp/pearl-GEUUz/vimrc' | source \\\$MYVIMRC\" INPUTRC=\"/tmp/pearl-GEUUz/inputrc\" bash --rcfile /tmp/pearl-GEUUz/bashrc -i ;"

    env TERM=xterm-color ssh -t "${ssh_opts[@]}" -- "$cmd"
}


ssh_pearl "$@"
