#!/usr/bin/env bash
#
# This file is part of Pearl (https://github.com/fsquillace/pearl-ssh) [now named kyrat]
#
# Copyright (c) 2008-2015
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# #########################################
# This is a slightly modified version of the original ssh_pearl:
# it calls the ssh_pearl function with passed arguments; that way it can be invoked
# by other scripts. It also forces the TERM env var.
# also defines gosu() alias for going sudo with included rc files.
#
# Check https://github.com/Russell91/sshrc for alternative.
#

readonly SELF="$(basename -- "$0")"

ssh_pearl() {
    local self rcScript inputrcScript vimrcScript tmux ssh_opts opt commands arg commands_opt cmd

    declare -a commands=()
    declare -a ssh_opts=()


    # strips empty lines & comments from input ($1) file
    _process_rc_file() {
        sed '/^\s*#/ d;/^\s*$/d' < "$1"
    }

    # pass rc files or directories containing rc files as separate arguments.
    # TODO: pass comment initiator (eg. # vs ") as an arg?
    _aggregate_scripts() {
        local node i

        # strip empty lines & comments:
        for node in "$@"; do
            [[ -e "$node" ]] || continue
            if [[ -f "$node" ]]; then
                _process_rc_file "$node"
            elif [[ -d "$node" ]]; then
                for i in "$node"/*; do
                    [[ -f "$i" ]] || continue
                    _process_rc_file "$i"
                done
            fi
        done
    }

    [[ -z "$*" ]] && { ssh; return $?; }

    for opt in "$@"; do
        case "$opt" in
            --) shift; break ;;
            *) ssh_opts+=("$opt"); shift ;;
        esac
    done

    for arg in "$@"; do
        commands+=("$arg")
    done

    [[ -n "${commands[*]}" ]] && commands_opt="-c '${commands[*]}'"

    command -v base64 >/dev/null 2>&1 || { echo >&2 "pearl-ssh requires base64 to be installed locally. Aborting."; return 1; }
    command -v gzip >/dev/null 2>&1 || { echo >&2 "pearl-ssh requires gzip to be installed locally. Aborting."; return 1; }

    [[ -z "$PEARL_HOME" ]] && PEARL_HOME=$HOME/.config/pearl

    rcScript="$(_aggregate_scripts "$PEARL_HOME/bashrc" "$PEARL_HOME/bashrc.d" | gzip | base64)"
    inputrcScript="$(_aggregate_scripts "$PEARL_HOME/inputrc" "$PEARL_HOME/inputrc.d" | gzip | base64)"
    vimrcScript="$(_aggregate_scripts "$PEARL_HOME/vimrc" "$PEARL_HOME/vimrc.d" | gzip | base64)"
    tmux="$(_aggregate_scripts "$PEARL_HOME/tmux.conf" "$PEARL_HOME/tmux.d" | gzip | base64)"
    self="$(gzip < "$0" | base64)"

    cmd="
        unset _tmp_dir; for d in /tmp \$HOME; do [[ -w \"\$d\" ]] && { _tmp_dir=\"\$d\"; break; } done
        [[ -d \"\$_tmp_dir\" ]] || { echo >&2 \"couldn't find writable tempdirs on the server. Aborting.\"; exit 1; };
        for d in base64 gunzip mktemp; do command -v \$d >/dev/null 2>&1 || { echo >&2 \"pearl-ssh requires [\$d] to be installed on the server. Aborting.\"; exit 1; } done
        export PEARL_HOME=\"\$(mktemp -d pearl-XXXXX -p \"\$_tmp_dir\")\";
        PEARLSSH_BIN=\"\$PEARL_HOME/bin\"; mkdir -- \"\$PEARLSSH_BIN\";
        export _TMUX_RC=\"\$_tmp_dir/.laur_tmux_rc\";
        rm -rf -- \"\$_TMUX_RC\" 2>/dev/null; mkdir -- \"\$_TMUX_RC\";

        trap \"rm -rf \"\$PEARL_HOME\"; exit\" EXIT HUP INT QUIT PIPE TERM KILL;
        echo \"$rcScript\" | base64 -di | gunzip > \"\$PEARL_HOME/bashrc\";
        echo \"$inputrcScript\" | base64 -di | gunzip > \"\$PEARL_HOME/inputrc\";
        echo \"$vimrcScript\" | base64 -di | gunzip > \"\$PEARL_HOME/vimrc\";
        echo \"$tmux\" | base64 -di | gunzip > \"\$PEARL_HOME/tmux.conf\";
        echo \"$self\" | base64 -di | gunzip > \"\$PEARLSSH_BIN/$SELF\";
        chmod -R +x \"\$PEARLSSH_BIN\";
        export PATH=\$PATH:\$PEARLSSH_BIN;

        # increments the number of dashes to be used in PS1 env var to indicate
        # the ssh-ing depth, as in how deep in ssh-sessions are we:
        export _SSH_PEARL_DEPTH_DASHES=${_SSH_PEARL_DEPTH_DASHES}-

        if ! grep -q 'pearl-ssh local function additions.*overrides' \"\$PEARL_HOME/bashrc\"; then
            echo -e \"# pearl-ssh local function additions/overrides:\\nunalias gosu tmux >/dev/null 2>&1\" >> \"\$PEARL_HOME/bashrc\"
        fi

        # delete previous (as in the one inherited from the previous ssh session) gosu() function definition:
        sed -i '/^gosu().*VIMINIT.*INPUTRC.*bash/d' \"\$PEARL_HOME/bashrc\"


        sed -i '/^alias tmux=/d' \"\$PEARL_HOME/bashrc\"
        # enter new tmux alias (keep on a single line!):
        echo -e \"alias tmux='tmux -f \\\"\$_TMUX_RC/tmux.conf\\\"'\" >> \"\$PEARL_HOME/bashrc\"
        sed -i '/^set .* default-command /d' \"\$PEARL_HOME/tmux.conf\"
        echo -e \"set -g default-command \\\"VIMINIT='let \\\$MYVIMRC=\$_TMUX_RC/vimrc | source \\\$MYVIMRC' INPUTRC='\$_TMUX_RC/inputrc' /bin/bash --rcfile '\$_TMUX_RC/bashrc'\\\"\" >> \"\$PEARL_HOME/tmux.conf\"
        cp -rp -- \"\$PEARL_HOME\"/* \"\$_TMUX_RC/\"

        # enter new gosu() function def (keep on a single line!):
        for d in \$PEARL_HOME \$_TMUX_RC; do echo -e \"gosu() { sudo -E bash --rcfile \\\"\$d/bashrc\\\" -i $commands_opt; }\" >> \"\$d/bashrc\"; done

        # doctor tmux settings/configs:
        [[ :\$PATH: != *:\"\$_TMUX_RC/bin\":* ]] && export PATH=\$PATH:\$_TMUX_RC/bin;  # make sure to keep _TMUX_RC at the bottom of PATH

        export VIMINIT=\"let \\\$MYVIMRC='\$PEARL_HOME/vimrc' | source \\\$MYVIMRC\"
        export INPUTRC=\"\$PEARL_HOME/inputrc\"

        # entry:
        bash --rcfile \"\$PEARL_HOME/bashrc\" -i ${commands_opt};

    "
    # use this to store gosu command in a var instead:
    #gosu_myvar="eval VIMINIT=\"let \\\$MYVIMRC='/tmp/pearl-GEUUz/vimrc' | source \\\$MYVIMRC\" INPUTRC=\"/tmp/pearl-GEUUz/inputrc\" bash --rcfile /tmp/pearl-GEUUz/bashrc -i ;"

    env TERM=xterm-color ssh -t "${ssh_opts[@]}" -- "$cmd"
    # TODO: start using here document: ssh otherhost << 'EOF'...
}

ssh_pearl "$@"
