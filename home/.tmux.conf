# prefix is ctrl-a
unbind C-b # vim is using it!
set -g prefix C-a
#bind C-a send-prefix
# make a jump to beginning of line:
bind a send-prefix

# shell
set -g default-command /bin/bash
set -g default-shell /bin/bash


set -g default-terminal "screen-256color"
set -g history-limit 10000
set -sg escape-time 1
set -g base-index 1
setw -g pane-base-index 1

# mouse works as expected:
set -g mouse on
# TODO: these mouse opts are deprecated as of oct 2015:
#setw -g mode-mouse on
#set -g mouse-select-pane on
#set -g mouse-resize-pane on
#set -g mouse-select-window on

setw -g monitor-activity on
set -g visual-activity on

setw -g mode-keys vi
set -g status-keys vi
#set -g status-keys emacs

# y and p as in vim
bind Escape copy-mode
unbind p
bind p paste-buffer # prefix + p  pastes the latest buffer
bind -t vi-copy 'v' begin-selection # begins selections
#bind -t vi-copy 'y' copy-selection # copies selection to tmux's paste buffers
# test this as per http://unix.stackexchange.com/questions/15715/getting-tmux-to-copy-a-buffer-to-the-clipboard :
# sends yanked text to sys clipboard as well:
bind -t vi-copy y copy-pipe "xclip"
#
bind -t vi-copy 'Y' copy-end-of-line # yank the current line
bind -t vi-copy 'Space' halfpage-down
bind -t vi-copy 'Bspace' halfpage-up

# extra commands for interacting with the ICCCM clipboard:
# send tmux buffer to clipboard:
bind C-c run "tmux save-buffer - | xclip -i -sel clipboard"
# paste from clipboard:
bind C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"

# easy-to-remember split pane commands
unbind '"'
unbind %
bind | split-window -h
bind - split-window -v
#bind h split-window -h
#bind v split-window -v

# moving between panes with vim movement keys
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# maximise and restore a pane:
# note: prefix + z toggles maximize & restore
unbind Up
bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp
unbind Down
bind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp

# moving between windows with vim movement keys
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# resize panes with vim movement keys
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
# reset size:
# select-layout even-vertical
# select-layout eve-horizontal
#
# Smart pane switching with awareness of vim splits:
# ( !!! requires christoomey/vim-tmux-navigator plugin for vim )
# (does not need prefix!)
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# <prefix c-l> to clear scn: !disables the window-movement minding
#bind C-l send-keys 'C-l'

# clear scrollback buffer:
bind C send-keys  "  clear && printf '\\e[3J'" \; send-keys "Enter"  # note leading space in the command so it wouldn't get stored in shell history

# allow title bar to adapt to whatever host you connect to:
set -g set-titles on
set -g set-titles-string "#T"

# force a reload/restart of the conf file:
unbind r
bind r source-file ~/.tmux.conf

# colors:
# TODO
setw -g mode-bg colour6
setw -g mode-fg colour0
set -g message-fg black
set -g message-bg yellow
set -g message-command-fg blue
set -g message-command-bg black
set -g pane-border-fg blue
set -g pane-active-border-fg brightred
set-option -g pane-border-bg default
#set -g pane-active-border-attr blink


# statusline: ###############
set -g status-bg default
set -g status-fg colour12
#set -g status-justify left

## Status Bar (if not using powerline):
#set -g status-bg default
#set -g status-fg cyan
#set -g status-interval 4
#set -g status-left ''
#set -g status-right ''
##set -g status-left '#[fg=white,bold]#S#[fg=cyan] | #[fg=white,bold]#(echo $USER) '
##set -g status-right '#[fg=white]#H#[fg=cyan] | #[fg=white]#(uname -r)#[default]'
#set -g status-justify centre

# powerline:
run-shell "powerline-daemon -q"
source "/usr/share/powerline/bindings/tmux/powerline.conf"
#source "/usr/local/lib/python2.7/dist-packages/powerline/bindings/tmux/powerline.conf"

#set-option -g allow-rename off
# clock
set -g clock-mode-colour blue

# focus events enabled for terminals that support them:
set -g focus-events on

# plugin manager (tmux-plugins/tpm):
# List of plugins
# Supports `github_username/repo` or full git repo URLs
set -g @tpm_plugins '              \
  tmux-plugins/tpm                 \
  tmux-plugins/tmux-sensible       \
  tmux-plugins/tmux-resurrect      \
  tmux-plugins/tmux-yank           \
'
# Other examples:
# github_username/plugin_name    \
# git@github.com/user/plugin     \
# git@bitbucket.com/user/plugin  \

# Initializes TMUX plugin manager.
# Keep this line at the very bottom of tmux.conf.
run-shell '~/.tmux/plugins/tpm/tpm'

#############################
# plugin settings:
#############################
# tmux-resurrect:

# restore additional programs:
#set -g @resurrect-processes 'ssh psql mysql sqlite3'
# programs with args should be double quoted:
#set -g @resurrect-processes 'some_program "git log"'

# override default pref + c-s(save) and pref + c-r(restore):
#set -g @resurrect-save 'S'
#set -g @resurrect-restore 'R'



#############################
###### legend - #############  from https://gist.github.com/MohamedAlaa/2961058
#WINDOWS ##############
#crate new window:
#prefix + c
#
#list windows:
#w
#
#find window:
#f
#
#rename current window
#prefix + ,
#
#kill window/close window
#&
#
#move to window based on index:
#prefix + 0-9
#
##################
#PANES
#show pane nrs:
#q
#
#kill pane:
#x
#
#
#SESSIONS ###############
#new session:
#:new<Cr>
#
#list sessions:
#s
#
#name session:
#$
#
#################
#go to copy mode:
#prefix + [    (currently binded to prfx + esc)
#(enter to get out of copy mode)
#
#paste buffer:
#pref + ]
#
#detatch:
#d
#
#big clock:
#t
#
#list shortcuts:
#?
#
#prompt:
#:
#
#COPY_PASTA:##############
#list all the paste buffers:
##
#
#delete most recently copied buffer of txt:
#-
#
#coose which buffer to paste interactively from a list:
#=
#
