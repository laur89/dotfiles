# prefix is ctrl-a
unbind C-b  # vim is using it!
set -g prefix C-a
#bind C-a send-prefix
# make a jump to beginning of line:
bind a send-prefix

# shell
set -g default-command /bin/bash
set -g default-shell /bin/bash


set -g default-terminal "tmux-256color"
set -g history-limit 15000
# lower the escape time wait:
set -sg escape-time 1
# set 1st window index to 1 (instead of 0):
set -g base-index 1
setw -g pane-base-index 1

# mouse works as expected:
set -g mouse on

# show messages for 4s:
#set -g display-time 4000

setw -g monitor-activity on
set -g visual-activity on

setw -g mode-keys vi
set -g status-keys vi
#set -g status-keys emacs

# y and p as in vim
bind Escape copy-mode
unbind p
bind p paste-buffer # prefix + p  pastes the latest buffer
bind -T copy-mode-vi v send -X begin-selection  # v key to begin text selection
#bind-key -T copy-mode-vi V send -X rectangle-toggle  # like c+v in vim; still need to initiate selection mode with 'v' first
bind-key -T copy-mode-vi Escape send -X cancel  # can exit copy-mode w/o 'q'


#bind -Tcopy-mode-vi M-y send -X copy-pipe "xclip -i -sel p -f | xclip -i -sel c" \; display-message "copied to system clipboard"
#bind -Tcopy-mode-vi y send -X copy-pipe "xclip -i -sel p -f | xclip -i -sel c" \; display-message "copied to system clipboard"
#bind -T copy-mode-vi y send -X copy-selection-and-cancel  # y to yank current selection
#bind -T copy-mode-vi y send -X copy-selection # copies selection to tmux's paste buffers
bind -T copy-mode-vi y send -X copy-pipe "xsel --input --clipboard" \; display-message "copied to system clipboard" \; send -X cancel
#bind -T copy-mode-vi C-c send -X copy-selection-and-cancel
bind -T copy-mode-vi C-c send -X copy-pipe "xsel --input --clipboard" \; display-message "copied to system clipboard" \; send -X cancel
#bind-key -Tcopy-mode-vi 'y' send -X copy-selection  # copies selection to tmux' paste buffers

# extra commands for interacting with the ICCCM clipboard:
# send tmux buffer to clipboard:
# for xclip:
#bind C-c run "tmux save-buffer - | xclip -i -sel clipboard"
#bind C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"
# for xsel:
#bind C-c run "tmux save-buffer - | xsel --input --clipboard"
bind C-v run "tmux set-buffer \"$(xsel --output --clipboard)\"; tmux paste-buffer"

# these mouse-bindings are from https://gist.github.com/rodricels/7951c3bd505d343b07309b76188af9b3
# Selection with mouse should copy to clipboard right away, in addition to the default action.
unbind -n -Tcopy-mode-vi MouseDragEnd1Pane
#bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-selection-and-cancel\; run "tmux save-buffer - | xsel --input --clipboard > /dev/null"  # note -and-cancel causes scrollback to jump back to bottom
bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-selection\; run "tmux save-buffer - | xsel --input --clipboard > /dev/null"

# -------------------------------
# Double LMB (button1) Select & Copy (Word); from https://stackoverflow.com/a/46638561
bind-key -T copy-mode-vi DoubleClick1Pane \
    select-pane \; \
    send-keys -X select-word \; \
    send-keys -X copy-pipe "xsel --input --clipboard"
bind-key -n DoubleClick1Pane \
    select-pane \; \
    copy-mode -M \; \
    send-keys -X select-word \; \
    send-keys -X copy-pipe "xsel --input --clipboard"

# Triple LMB (button1) Select & Copy (Line)
bind-key -T copy-mode-vi TripleClick1Pane \
    select-pane \; \
    send-keys -X select-line \; \
    send-keys -X copy-pipe "xsel --input --clipboard"
bind-key -n TripleClick1Pane \
    select-pane \; \
    copy-mode -M \; \
    send-keys -X select-line \; \
    send-keys -X copy-pipe "xsel --input --clipboard"
# -------------------------------


# Middle click to paste from the clipboard:
unbind-key MouseDown2Pane
bind-key -n MouseDown2Pane run "tmux set-buffer \"$(xsel --output --clipboard)\"; tmux paste-buffer"

# Drag to re-order windows:
bind-key -n MouseDrag1Status swap-window -t=

# Double click on the window list to open a new window:
bind-key -n DoubleClick1Status new-window


# easy-to-remember split pane commands
unbind '"'
unbind %
bind | split-window -h
bind - split-window -v
#bind h split-window -h
#bind v split-window -v

# moving between panes with vim movement keys
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R


bind-key -T prefix l last-window  # toggle between windows
bind-key -T prefix \; last-pane  # toggle between panes

# moving between windows with vim movement keys:
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# re-arrange/move windows: (ctrl+alt+{h,l})
bind -r C-M-h swap-window -t -1
bind -r C-M-l swap-window -t +1

# resize panes with vim movement keys
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
# reset size:
# select-layout even-vertical
# select-layout eve-horizontal
#
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\ select-pane -l

# <prefix c-l> to clear scn: !disables the window-movement minding
#bind C-l send-keys 'C-l'

# clear scrollback buffer:
# alternative:  perl -e 'print "\n"x512;'
bind C send-keys  "  clear && printf '\\e[3J'" \; send-keys "Enter"  # note leading space in the command so it wouldn't get stored in shell history

# Prompt to rename window right after it's created:
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Rename session and window:
#bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Link window:
#bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane select-pane \; send-keys -X -N 2 scroll-down


# interactive window & session search (from https://superuser.com/questions/1397211/interactive-search-of-tmux-sessions-and-windows-with-synchronize-panes-on)
# -------------------------------
#bind j split-window -v "tmux list-sessions -F '#S' | fzf --reverse | xargs tmux switch-client -t"
# same as previous, but remembers synchronize-panes state:
bind-key j split-window -v '\
 if [[ $(tmux show-window-option synchronize-panes) == *on ]];\
 then tmux set-window-option -q synchronize-panes off;\
     restore="tmux set-window-option -q synchronize-panes on";\
 fi;\
 tmux list-sessions -F "#S" | fzf --print0 --reverse | xargs -0 tmux switch-client -t;\
 $restore'
#bind k split-window -v "tmux list-window -F '#W' | fzf --reverse | xargs tmux select-window -t"
# same as previous, but remembers synchronize-panes state:
bind-key k split-window -v '\
 if [[ $(tmux show-window-option synchronize-panes) == *on ]];\
 then tmux set-window-option -q synchronize-panes off;\
     restore="tmux set-window-option -q synchronize-panes on";\
 fi;\
 tmux list-windows -F "#W" | fzf --print0 --reverse | xargs -0 tmux select-window -t;\
 $restore'
# -------------------------------

# allow title bar to adapt to whatever host you connect to:
set -g set-titles on
set -g set-titles-string "#T"
set -g set-clipboard on  # set terminal clipboard using terminal ascii escape sequences

# force a reload/restart of the conf file:
unbind r
bind r source-file ~/.tmux.conf

# colors:
# TODO
# window mode:
setw -g mode-style fg=colour0,bg=colour6

set -g message-style fg=black,bg=yellow
set -g message-command-style fg=blue,bg=black
set -g pane-border-style fg=blue,bg=default
set -g pane-active-border-style fg=brightred,blink
#set -g pane-active-border-attr blink

# window status (think only matters if not using powerline):
#setw -g window-status-format " #F#I:#W#F "
#setw -g window-status-current-format " #F#I:#W#F "
#setw -g window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W "
#setw -g window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W "
#setw -g window-status-current-style bg=colour0,fg=colour11,dim
#setw -g window-status-style bg=green,fg=black,reverse



# statusline: ###############
set -g status-style fg=colour12,bg=default
#set -g status-justify left

## Status Bar (if not using powerline):
#set -g status-style bg=default,fg=cyan
#set -g status-interval 4
#set -g status-left ''
#set -g status-right ''
##set -g status-left '#[fg=white,bold]#S#[fg=cyan] | #[fg=white,bold]#(echo $USER) '
##set -g status-right '#[fg=white]#H#[fg=cyan] | #[fg=white]#(uname -r)#[default]'
#set -g status-justify centre

# powerline:
run-shell "powerline-daemon -q"
source "/usr/share/powerline/bindings/tmux/powerline.conf"
#source "/usr/local/lib/python2.7/dist-packages/powerline/bindings/tmux/powerline.conf"

#set -g allow-rename off
# clock
set -g clock-mode-colour blue

# focus events enabled for terminals that support them:
set -g focus-events on

# plugin manager (tmux-plugins/tpm):
# List of plugins
# Supports `github_username/repo` or full git repo URLs
set -g @tpm_plugins '              \
  tmux-plugins/tpm                 \
  tmux-plugins/tmux-sensible       \
  tmux-plugins/tmux-resurrect      \
'
# Other examples:
# github_username/plugin_name    \
# git@github.com/user/plugin     \
# git@bitbucket.com/user/plugin  \

# Initializes TMUX plugin manager.
# Keep this line at the very bottom of tmux.conf.
run-shell '~/.tmux/plugins/tpm/tpm'

#############################
# plugin settings:
#############################
# tmux-resurrect:

# restore additional programs:
#set -g @resurrect-processes 'ssh psql mysql sqlite3'
# programs with args should be double quoted:
#set -g @resurrect-processes 'some_program "git log"'

# override default pref + c-s(save) and pref + c-r(restore):
#set -g @resurrect-save 'S'
#set -g @resurrect-restore 'R'



#############################
###### legend - #############  from https://gist.github.com/MohamedAlaa/2961058
#WINDOWS ##############
#crate new window:
#prefix + c
#
#list windows:
#w
#
#find window:
#f
#
#rename current window
#prefix + ,
#
#find window by text it contains: (find-window)
#prefix + f
#
#kill window/close window
#&
#
#move to window based on index:
#prefix + 0-9
#
##################
#PANES
#show pane nrs:
#q
#
#kill pane:
#x
#
#
#SESSIONS ###############
#new session:
#:new<Cr>
#
#list sessions:
#s
#
#name session:
#$
#
#################
#go to copy mode:
#prefix + [    (currently binded to prfx + esc)
#(enter to get out of copy mode)
#
#paste buffer:
#pref + ]
#
#detatch:
#d
#
#big clock:
#t
#
#list shortcuts:
#?
#
#prompt:
#:
#
#COPY_PASTA:##############
#list all the paste buffers:
##
#
#delete most recently copied buffer of txt:
#-
#
#coose which buffer to paste interactively from a list:
#=
#
