# cool configs/setups:
# https://github.com/samoshkin/tmux-config
#
# plugins to consider:
#  - https://github.com/tmux-plugins/tmux-sessionist
#  - https://github.com/tmux-plugins/tmux-pain-control
#  - https://github.com/tmux-plugins/tmux-logging
#  - https://github.com/carlocab/tmux-nvr  AND  https://github.com/daplay/tmux_nvr
# ###########################################################
yank="~/.tmux/yank.sh"


# prefix is ctrl-a
unbind C-b  # vim is using it!
set -g prefix C-a
#bind C-a send-prefix
# make a jump to beginning of line:
bind a send-prefix

### shell
# command used for new windows (if not specified when the window is created):
set -g default-command /bin/bash
# default-shell only used to create login shell when default-command is empty:
set -g default-shell /bin/bash
set -g default-terminal "tmux-256color"  # TODO: is tmux-256color causing issues in some remote boxes? maybe try 'screen-256color' in those cases?
#set -g default-terminal "linux"


set -g history-limit 20000
# lower the escape time wait:
set -sg escape-time 1
# set 1st window index to 1 (instead of 0):
set -g base-index 1
setw -g pane-base-index 1

# mouse works as expected:
set -g mouse on

# how many ms to show messages for:
set -g display-time 1500

setw -g monitor-activity on
set -g visual-activity off  # set to 'on' to also get that 'Activity in window <n>' message

setw -g mode-keys vi
set -g status-keys vi
#set -g status-keys emacs

# y and p as in vim
bind Escape copy-mode
unbind p
bind p paste-buffer # prefix + p  pastes the latest buffer
bind -T copy-mode-vi v send -X begin-selection  # v key to begin text selection
#bind-key -T copy-mode-vi V send -X rectangle-toggle  # like c+v in vim; still need to initiate selection mode with 'v' first
bind-key -T copy-mode-vi Escape send -X cancel  # can exit copy-mode w/o 'q'


#bind -Tcopy-mode-vi M-y send -X copy-pipe "xclip -i -sel p -f | xclip -i -sel c" \; display-message "copied to system clipboard"
#bind -Tcopy-mode-vi y send -X copy-pipe "xclip -i -sel p -f | xclip -i -sel c" \; display-message "copied to system clipboard"
#bind -T copy-mode-vi y send -X copy-selection-and-cancel  # y to yank current selection
#bind -T copy-mode-vi y send -X copy-selection # copies selection to tmux's paste buffers
bind -T copy-mode-vi y send -X copy-pipe "xsel --input --clipboard" \; display-message "copied to system clipboard" \; send -X cancel
#bind -T copy-mode-vi C-c send -X copy-selection-and-cancel
bind -T copy-mode-vi C-c send -X copy-pipe "xsel --input --clipboard" \; display-message "copied to system clipboard" \; send -X cancel
#bind-key -Tcopy-mode-vi 'y' send -X copy-selection  # copies selection to tmux' paste buffers
bind -T copy-mode-vi Y send-keys -X copy-line \;\
    run "tmux save-buffer - | xsel --input --clipboard"
bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \;\
    run "tmux save-buffer - | xsel --input --clipboard"

# extra commands for interacting with the ICCCM clipboard:
# send tmux buffer to clipboard:
# for xclip:
#bind C-c run "tmux save-buffer - | xclip -i -sel clipboard"
#bind C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"
# for xsel:
#bind C-c run "tmux save-buffer - | xsel --input --clipboard"
bind C-v run "tmux set-buffer \"$(xsel --output --clipboard)\"; tmux paste-buffer"

# these mouse-bindings are from https://gist.github.com/rodricels/7951c3bd505d343b07309b76188af9b3
# Selection with mouse should copy to clipboard right away, in addition to the default action.
unbind -n -Tcopy-mode-vi MouseDragEnd1Pane
#bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-selection-and-cancel\; run "tmux save-buffer - | xsel --input --clipboard > /dev/null"  # note -and-cancel causes scrollback to jump back to bottom
bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-selection\; run "tmux save-buffer - | xsel --input --clipboard > /dev/null"
#OR: ####
## Copy selection on drag end event, but do not cancel copy mode and do not clear selection
#bind -T copy-mode-vi MouseDragEnd1Pane \
    #send-keys -X copy-pipe "$yank"
## clear select on subsequence mouse click:
#bind -T copy-mode-vi MouseDown1Pane select-pane \;\
   #send-keys -X clear-selection

# -------------------------------
# Double LMB (button1) Select & Copy (Word); from https://stackoverflow.com/a/46638561
bind-key -T copy-mode-vi DoubleClick1Pane \
    select-pane \; \
    send-keys -X select-word \; \
    send-keys -X copy-pipe "xsel --input --clipboard"
bind-key -n DoubleClick1Pane \
    select-pane \; \
    copy-mode -M \; \
    send-keys -X select-word \; \
    send-keys -X copy-pipe "xsel --input --clipboard"

# Triple LMB (button1) Select & Copy (Line)
bind-key -T copy-mode-vi TripleClick1Pane \
    select-pane \; \
    send-keys -X select-line \; \
    send-keys -X copy-pipe "xsel --input --clipboard"
bind-key -n TripleClick1Pane \
    select-pane \; \
    copy-mode -M \; \
    send-keys -X select-line \; \
    send-keys -X copy-pipe "xsel --input --clipboard"
# -------------------------------


# Middle click to paste from the clipboard:
unbind-key MouseDown2Pane
bind-key -n MouseDown2Pane run "tmux set-buffer \"$(xsel --output --clipboard)\"; tmux paste-buffer"

# Drag to re-order windows:
bind-key -n MouseDrag1Status swap-window -t=

# Double click on the window list to open a new window:
bind-key -n DoubleClick1Status new-window


# easy-to-remember split pane commands
# note the -f options split the whole screen, not from current pane
unbind '"'
unbind %
bind | split-window -h -c "#{pane_current_path}"
bind '\' split-window -fh -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind _ split-window -fv -c "#{pane_current_path}"
#bind h split-window -h
#bind v split-window -v

# moving between panes with vim movement keys (note: no need when using vim-tmux-navigator)
#bind h select-pane -L
#bind j select-pane -D
#bind k select-pane -U
#bind l select-pane -R


#bind-key -T prefix l last-window       # toggle between windows (mnemonic: 'last'); commented out as it appears to be provided by some plugin or by default already
#bind-key -T prefix \; last-pane        # toggle between panes
#bind-key -T prefix รถ switch-client -l  # toggle between sessions (on et keymap)
bind-key -T prefix \; switch-client -l  # toggle between sessions; note if you only have 2 sessions, then it's effectively same as our 'bind-key j' logic

# moving between windows with vim movement keys:
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# re-arrange/move windows: (ctrl+alt+{h,l})
bind -r C-M-h swap-window -t -1
bind -r C-M-l swap-window -t +1
# ctrl+alt mappings might not work, so also define these:
# note: prefix+{<,>} mappings are by default used for showing some tmux menus?
bind-key -r "<" swap-window -d -t -1
bind-key -r ">" swap-window -d -t +1


# resize panes with vim movement keys
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
# reset size:
# select-layout even-vertical
# select-layout eve-horizontal

# <prefix c-l> to clear scn: !disables the vim window-movement binding
#bind C-l send-keys 'C-l'

# clear scrollback buffer:  TODO: is this still necessary? looks like normal 'clear' nukes the buffer nicely now
# alternative:  perl -e 'print "\n"x512;'
bind C send-keys  "  clear && printf '\\e[3J'" \; send-keys "Enter"  # note leading space in the command so it wouldn't get stored in shell history

# Prompt to rename window right after it's created: (disabled atm, as sometimes it also asks (re)naming fzf-opened panes)
#set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

bind -r C-o swap-pane -D

# Rename session and window:
#bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Link window:
#bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane select-pane \; send-keys -X -N 2 scroll-down

# Swap panes back and forth with 1st pane. {
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
# (note default 's' binding is listing sessions)
bind s if '[ #{pane_index} -eq 1 ]' \
     'swap-pane -s "!"' \
     'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# similar to previous pane-switching, but instead of automatically swapping, it
# asks for the pane number to swap with:
#bind s display "Select the pane to move to first pane:" \; \
    #display-pane -d 5000 "select-pane -t '%%' ; if '[ #{pane_index} -eq 1 ]' \
    #'swap-pane -s "!"' \
    #'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'"
# }

bind X confirm-before -p "kill window [#W]? (y/n)" kill-window  # note x is for pane
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session [#S]? (y/n)" kill-session


# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'


# interactive window & session search (from https://superuser.com/questions/1397211/interactive-search-of-tmux-sessions-and-windows-with-synchronize-panes-on)
# -------------------------------
#bind-key j split-window -v '  # before popup feature we would create a vertical split instead
bind-key j display-popup -E '\
 if [[ $(tmux show-window-option synchronize-panes) == *on ]];\
 then tmux set-window-option -q synchronize-panes off;\
     restore="tmux set-window-option -q synchronize-panes on";\
 fi;\
 cur_sess="$(tmux display-message -p "#S")";\
 tmux list-sessions -F "#S" | grep -vx "$cur_sess" | fzf --reverse -1 -0 --print0 | xargs -0 tmux switch-client -t;\
 $restore'

#bind k split-window -v "tmux list-window -F '#W' | fzf --reverse | xargs tmux select-window -t"
# same as previous, but remembers synchronize-panes state:
bind-key k display-popup -E '\
 if [[ $(tmux show-window-option synchronize-panes) == *on ]];\
 then tmux set-window-option -q synchronize-panes off;\
     restore="tmux set-window-option -q synchronize-panes on";\
 fi;\
 cur_win="$(tmux display-message -p "#W")";\
 tmux list-windows -F "#W" | grep -vx "$cur_win" | fzf --reverse -1 -0 --print0 | xargs -0 tmux select-window -t;\
 $restore'

# list all sessions and their windows, sans current session ones:
#bind-key ร display-popup -E "\  # used w/ et keymap
bind-key h display-popup -E "\
 if [[ \$(tmux show-window-option synchronize-panes) == *on ]];\
 then tmux set-window-option -q synchronize-panes off;\
     restore='tmux set-window-option -q synchronize-panes on';\
 fi;\
 cur_sess=\"\$(tmux display-message -p '#S')\";\
 tmux list-windows -a -F '#{session_name}: #{window_name}' \
     | grep -v \"^\$cur_sess:\" \
     | fzf --reverse -1 -0 --print0 \
     | xargs -0 -n 2 -d : sh -c 'tmux switch-client -t \"$0:$(echo -n \"$1\" | cut -c 2-)\"';\
 \$restore"
#  alternative K one, where we clean params up with grep & awk; note xargs is required to get the env truly clean, otherwise select-window sees previous session wins:
########
#bind-key T display-popup -E "\
 #if [[ \$(tmux show-window-option synchronize-panes) == *on ]];\
 #then tmux set-window-option -q synchronize-panes off;\
     #restore='tmux set-window-option -q synchronize-panes on';\
 #fi;\
 #cur_sess=\"\$(tmux display-message -p '#S')\";\
 #sel=\"\$(tmux list-windows -a -F '#{session_name}: #{window_name}' | grep -v \"^\$cur_sess:\" | fzf --reverse)\";\
 #if [[ -n \"\$sel\" ]]; then\
 #win=\"\$(echo \"\$sel\" | grep -Po ':\\s*\\K.*' | awk '{\$1=\$1;print}')\";\
 #sess=\"\$(echo \"\$sel\" | grep -Po '^([^:]+)(?=)' | awk '{\$1=\$1;print}')\";\
 #echo '' |xargs env -i bash -c 'tmux switch-client -t \"\$0\";tmux select-window -t \"\$1\"' \"\$sess\" \"\$win\";\
 #fi;\
 #\$restore"
# -------------------------------

# allow title bar to adapt to whatever host you connect to:
set -g set-titles on
set -g set-titles-string "t:#S / #W / #T"  # keep this in sync with rofi-tmux (rft) regex! note 't:' prefix is to locate window quickly via rofi
set -g set-clipboard on  # set terminal clipboard using terminal ascii escape sequences

# force a reload/restart of the conf file:
unbind r
bind r source-file ~/.tmux.conf \; display "Config reloaded"

# new window and retain cwd
bind c new-window -c "#{pane_current_path}"

# Edit configuration and reload:
bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"Config reloaded\"'"

# colors/theming:
# window status (think only matters if not using powerline):
#setw -g window-status-format " #F#I:#W#F "
#setw -g window-status-current-format " #F#I:#W#F "
#setw -g window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W "
#setw -g window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W "
#setw -g window-status-current-style bg=colour0,fg=colour11,dim
#setw -g window-status-style bg=green,fg=black,reverse


# statusline: ###############
#set -g status-style fg=colour12,bg=default
#set -g status-justify left

## Status Bar (if not using powerline):
#set -g status-style bg=default,fg=cyan
#set -g status-interval 4
#set -g status-left ''
#set -g status-right ''
##set -g status-left '#[fg=white,bold]#S#[fg=cyan] | #[fg=white,bold]#(echo $USER) '
##set -g status-right '#[fg=white]#H#[fg=cyan] | #[fg=white]#(uname -r)#[default]'
#set -g status-justify centre

# powerline (overrides built-in statusline):
#run-shell "powerline-daemon -q"
#source "/usr/share/powerline/bindings/tmux/powerline.conf"

set -g allow-rename off

# focus events enabled for terminals that support them:
set -g focus-events on

# =====================================
# ===           Theme               ===
# =====================================

# =====================================
# ===    Appearence and status bar  ===
# ======================================
if-shell 'test -f "$HOME/.tmux/colors/gruvbox.conf"' \
    'source-file ~/.tmux/colors/gruvbox.conf'

# copy-mode (ie selection) styling:
setw -g mode-style "fg=default,bg=red"
#setw -g mode-style fg=colour0,bg=colour6

#setw -g window-status-format " #I:#W "
#setw -g window-status-current-style "fg=$color_light,bold,bg=$color_main"
#setw -g window-status-current-format "#[fg=$color_dark,bg=$color_main]$separator_powerline_right#[default] #I:#W# #[fg=$color_main,bg=$color_dark]$separator_powerline_right#[default]"

## when window has monitoring notification
#setw -g window-status-activity-style "fg=$color_main"

## outline for active pane
#setw -g pane-active-border-style "fg=$color_main"

## general status bar settings
#set -g status on
set -g status-interval 5
set -g status-position top
#set -g status-justify left
# set max length of the right component:
#set -g status-right-length 100

## define widgets we're going to use in status bar
## note, that this is not the complete list, some of them are loaded from plugins
#wg_session="#[fg=$color_session_text] #S #[default]"
#wg_battery="#{battery_status_fg} #{battery_icon} #{battery_percentage}"
#wg_date="#[fg=$color_secondary]%h %d %H:%M#[default]"
#wg_user_host="#[fg=$color_secondary]#(whoami)#[default]@#H"
#wg_is_zoomed="#[fg=$color_dark,bg=$color_secondary]#{?window_zoomed_flag,[Z],}#[default]"
## TODO: highlighted for nested local session as well
#wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'OFF')#[default]"

#set -g status-left "$wg_session"
#set -g status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed #{sysstat_cpu} | #{sysstat_mem} | #{sysstat_loadavg} | $wg_user_host | $wg_date $wg_battery #{online_status}"

## online and offline icon for tmux-online-status
#set -g @online_icon "#[fg=$color_level_ok]โ#[default]"
#set -g @offline_icon "#[fg=$color_level_stress]โ#[default]"

## Configure view templates for tmux-plugin-sysstat "MEM" and "CPU" widget
#set -g @sysstat_mem_view_tmpl 'MEM:#[fg=#{mem.color}]#{mem.pused}#[default] #{mem.used}'

## Configure colors for tmux-plugin-sysstat "MEM" and "CPU" widget
#set -g @sysstat_cpu_color_low "$color_level_ok"
#set -g @sysstat_cpu_color_medium "$color_level_warn"
#set -g @sysstat_cpu_color_stress "$color_level_stress"

#set -g @sysstat_mem_color_low "$color_level_ok"
#set -g @sysstat_mem_color_medium "$color_level_warn"
#set -g @sysstat_mem_color_stress "$color_level_stress"

#set -g @sysstat_swap_color_low "$color_level_ok"
#set -g @sysstat_swap_color_medium "$color_level_warn"
#set -g @sysstat_swap_color_stress "$color_level_stress"


## Configure tmux-battery widget colors:
#set -g @batt_color_full_charge "#[fg=$color_level_ok]"
#set -g @batt_color_high_charge "#[fg=$color_level_ok]"
#set -g @batt_color_medium_charge "#[fg=$color_level_warn]"
#set -g @batt_color_low_charge "#[fg=$color_level_stress]"

# Configure tmux-prefix-highlight colors:
set -g @prefix_highlight_output_prefix '['
set -g @prefix_highlight_output_suffix ']'
set -g @prefix_highlight_fg "colour239,bold"
set -g @prefix_highlight_bg "yellow"
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=colour223,bold,bg=red"

# Configure extrakto: (prefix+Tab to toggle by default)
set -g @extrakto_clip_tool 'xsel --input --clipboard'
#set -g @extrakto_clip_tool 'copyq add - && copyq select 0'

# Configure continuum:
set -g @continuum-restore 'on'  # automatically restore when _server_ is started
#set -g @continuum-boot 'on'  # commented out as it's only to generate the systemd service file; see https://github.com/tmux-plugins/tmux-continuum/blob/master/docs/automatic_start.md

# Configure vim-tmux-navigator:
## clear the clear-screen shortcut, so C-l is not bound (see https://github.com/christoomey/vim-tmux-navigator/pull/411)
set -g @vim_navigator_prefix_mapping_clear_screen ''

wg_is_zoomed="#[bg=yellow,bold,fg=colour239]#{?window_zoomed_flag,[Z],}#[default]"
wg_is_zoomed_win="#{?window_zoomed_flag,[Z],}#[default]"
# TODO: highlighted for nested local session as well
wg_is_keys_off="#[bold,bg=yellow,fg=colour239]#([ $(tmux show-option -qv key-table) = 'off' ] && echo '[OFF]')#[default]"

# =====================================
# ===        Renew environment      ===
# =====================================
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

#bind '$' run "~/.tmux/renew_env.sh"

# ==============================================
# ===   Nesting local and remote sessions    ===
# ==============================================

# Note atm we're appending remote config via sshpearl instead.
# Session is considered to be remote when we ssh into host
#if-shell 'test -n "$SSH_CLIENT"' \
    #'source-file ~/.tmux.remote.conf'

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either.
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session.

# see: toggle on/off all keybindings ยท Issue #237 ยท tmux/tmux - https://github.com/tmux/tmux/issues/237

# Also, change some visual styles when window keys are off
bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=colour225,bg=colour239" \;\
    set status-left "#[fg=colour252, bg=colour244] #S #[fg=colour244, bg=colour239, nobold, noitalics, nounderscore]๎ฐ" \;\
    set status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed #[fg=colour241, bg=colour239, nobold, nounderscore, noitalics]๎ฒ#[fg=colour249,bg=colour241] %a %d ๎ณ #[bold]%H:%M " \;\
    setw window-status-current-format "#[fg=colour239, bg=colour253, nobold, noitalics, nounderscore]๎ฐ#[fg=colour239, bg=colour253] #I ๎ฑ#[fg=colour239, bg=colour253, bold] #W $wg_is_zoomed_win#[fg=colour253, bg=colour239, nobold, noitalics, nounderscore]๎ฐ" \;\
    setw -g window-status-format         "#[fg=colour239,bg=colour241,noitalics]๎ฐ#[fg=colour223,bg=colour241] #I ๎ฑ#{?window_activity_flag,#[fg=red blink bold],#[fg=colour223, bg=colour241]} #W $wg_is_zoomed_win#[fg=colour241, bg=colour239, noitalics]๎ฐ" \;\
    set window-status-current-style "fg=colour248,bold,bg=colour223" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u status-left \;\
  set -u status-right \;\
  setw -u window-status-current-format \;\
  setw -g window-status-format "#[fg=colour237,bg=colour239,noitalics]๎ฐ#[fg=colour223,bg=colour239] #I ๎ฑ#{?window_activity_flag,#[fg=red blink bold],#[fg=colour223, bg=colour239]} #W $wg_is_zoomed_win#[fg=colour239, bg=colour237, noitalics]๎ฐ" \;\
  set -u window-status-current-style \;\
  refresh-client -S
# -------------------------------

# plugin manager (tmux-plugins/tpm):
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'laktak/extrakto'
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'carlocab/tmux-nvr'
set -g @plugin 'Morantron/tmux-fingers'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

#############################
# plugin settings:
#############################
# tmux-resurrect:

# restore additional programs:
#set -g @resurrect-processes 'ssh psql mysql sqlite3'
# programs with args should be double quoted:
#set -g @resurrect-processes 'some_program "git log"'

# override default pref + c-s(save) and pref + c-r(restore):
#set -g @resurrect-save 'S'
#set -g @resurrect-restore 'R'



#############################
###### legend - #############  from https://gist.github.com/MohamedAlaa/2961058
#WINDOWS ##############
#crate new window:
#prefix + c
#
#list windows:
#w
#
#find window:
#f
#
#rename current window
#prefix + ,
#
#find window by text it contains: (find-window)
#prefix + f
#
#kill window/close window
#&
#
#move to window based on index:
#prefix + 0-9
#
#promote current pane into new window:
#prefix + !
#
# move window back&forth (from our mapping):
#prefix + <
#prefix + >
#
##################
#PANES
#show pane nrs/pane indexes:
#q
#
#kill pane:
#x
#
#cycle/rotate panes:
#ctrl + o
#
#shuffle between layouts:
#prefix + space
#
#
#SESSIONS ###############
#new session:
#:new<Cr>
#
#list sessions: (currently re-bonund to pane swapping)
#s
#
#name session:
#$
#
#kill session/exit session:
#:kill-session
#
#################
#go to copy mode:
#prefix + [    (currently binded to prfx + esc)
#(enter to get out of copy mode)
#
#paste buffer:
#pref + ]
#
#detatch:
#d
#
#select which session to detach from:
#D
#
#big clock:
#t
#
#list shortcuts:
#?
#
#prompt:
#:
#
#COPY_PASTA:##############
#list all the paste buffers:
##
#
#delete most recently copied buffer of txt:
#-
#
#choose which buffer to paste interactively from a list:
#=
#
