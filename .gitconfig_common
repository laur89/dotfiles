;[name]  ! name block doesn't belong in common gitconfig !
[merge]
    ;tool = meld
    ;tool = vimdiff
    tool = my_meld
    conflictstyle = diff3
    prompt = false
[mergetool "my_meld"]
    ;cmd = meld --auto-merge --diff $BASE $LOCAL --diff $BASE $REMOTE --diff $LOCAL $BASE $REMOTE --output $MERGED
    ;cmd = meld --diff $BASE $LOCAL --diff $BASE $REMOTE --diff $LOCAL $BASE $REMOTE --output $MERGED
    ; MJ's cmd:
    cmd = meld --auto-merge $LOCAL $BASE $REMOTE --output $MERGED --diff $LOCAL $BASE --diff $BASE $REMOTE
    ;keepBackup = false
;[mergetool]
    ;keepBackup = false
[core]
    excludesfile = /home/laur/.gitignore_global
    editor = nvim
    ;autocrlf = input
    autocrlf = false
    safecrlf = true
    ;pager = less
    pager = diff-so-fancy | less --tabs=4 -RFX
[pull]
    rebase = true
[rebase]
    autoStash = true  ; stashes local changes before rebase, if needed
[difftool]
    prompt = true
[diff]
    tool = meld
    renames = true
    ;tool = vimdiff
;[multidiff]
    ; see http://www.xenomachina.com/2012/02/multi-diff-with-vim-andor-git.html
    ; & https://github.com/xenomachina/public/
    ;tool = vd -f
[pager]
    difftool = false
[push]
    default = simple
[alias]
    commt = commit
    st = status
    com = commit
    au = add -u
    a = add
    b = branch -avv
    aa = add --all
    rst = reset
    rvrt = revert
    di = diff
    dif = diff
    dd = difftool --dir-diff
    showtool = "!showci () { rev=${1:-HEAD}; git difftool --dir-diff $rev~1 $rev; }; showci $1"
    squash = "!sqash () { rev=$1; echo "$rev" | grep -Eq '^[0-9]+$' && [ "$rev" -gt 1 -a "$rev" -lt 10 ] || return 1; git rebase -i HEAD~$rev; }; sqash $1"
    stash-unapply = !git stash show -p | git apply -R
    co = checkout
    cp = cherry-pick
    rb = rebase
    fe = fetch --prune --tags
    pul = pull
    desc = describe
    lg = log -i --all --graph --source --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\n --abbrev-commit --date=relative
    pushf = push --force-with-lease
    puhs = push

    commit-undo = reset --soft HEAD~1
    undo-commit = reset --soft HEAD~1
    uncommit =    reset --soft HEAD~1
    #  TODO: this doesn't follow branch, does it?:
    reset-to-index = !git fetch origin && git reset --hard origin/HEAD
    rst-to-index =   !git fetch origin && git reset --hard origin/HEAD

    ;stashtofile = !git stash && git stash show -p stash@{0} > /tmp/stashfile.git && git stash pop
    stashtofile = "!stof () { _stash=$(git config --local remote.origin.url) || return 1; _stash=/tmp/${_stash##*/}.stash || return 1; _token=6c1372ce93186e7957cd299179b2ddf6308cc244; git stash save $_token > /dev/null || return 1; if git stash list | grep -q $_token; then git stash show -p stash@{0} > $_stash && git stash pop && echo && echo stashfile @ [$_stash]; else echo && echo nothing to stash; fi; }; stof"

    ;stashtofile-pick = !git stash --patch && git stash show -p stash@{0} > /tmp/stashfile.git && git stash pop
    stashtofile-pick = "!stof () { _stash=$(git config --local remote.origin.url) || return 1; _stash=/tmp/${_stash##*/}.picked.stash || return 1; _token=6c1372ce93186e7957cd299179b2ddf6308cc245; git stash save --patch $_token || return 1; if git stash list | grep -q $_token; then git stash show -p stash@{0} > $_stash && git stash pop && echo && echo stashfile @ [$_stash]; else echo && echo nothing to stash; fi; }; stof"
    stash-pick = stash --patch
    show-stashed = stash show -p stash@{0}
    stashed-show = stash show -p stash@{0}
    ;stashdrop = !git stash && git stash drop
    stashdrop = "!stshdrp () { _stash=$(git config --local remote.origin.url) || return 1; _stash=/tmp/${_stash##*/}.dropped.stash || return 1; _token=6c1372ce93186e7957cd299179b2ddf6308cc246; git stash save $_token > /dev/null || return 1; if git stash list | grep -q $_token; then git stash show -p stash@{0} > $_stash && git stash drop && echo && echo stashfile backed @ [$_stash]; else echo && echo nothing to stash; fi; }; stshdrp"
    stashunstaged = "!stshustgd () { if ! git commit -m 'WIP - temp committing staged changes'; then echo && echo nothing staged && return 1; fi; git add . || return 1; git stash save 'unstaged files stash' > /dev/null || return 1; git reset --soft HEAD^; }; stshustgd"
    keepstaged = !git stash save --keep-index

    new-branch = checkout -b
    branch-new = checkout -b
    branch-delete = branch -D ; deletes local branch
    delete-branch = branch -D
    delete-branch-remote = push origin --delete
    delete-remote-branch = push origin --delete
    branch-delete-remote = push origin --delete

[gitflow "branch"]
    master = master
    develop = develop
[gitflow "prefix"]
    feature = feature/
    release = release/
    hotfix = hotfix/
    support = support/
    versiontag =

;;;;;;;;;;;;;;;;;;;
;;;; COMMANDSS ;;;;
;;;;;;;;;;;;;;;;;;;
; git log --all --oneline
; git log --all --oneline --author=rickhanlonii | grep "search query"
; git show a2c25061
;   or  git show a2c25061 --stat   to show info about commit without diff
;
