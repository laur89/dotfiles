; interesting resources:
;  - https://github.com/intelfx/dotfiles/blob/master/.gitconfig
;  - github PR management: https://gist.github.com/gnarf/5406589

;[name]  ! name block doesn't belong in common gitconfig !
[merge]
    ;tool = meld
    ;tool = p4merge
    ;tool = vimdiff
    ;tool = nvr
    tool = my_meld
    conflictstyle = zdiff3
    prompt = false
[mergetool "my_meld"]
    ;cmd = meld --auto-merge --diff $BASE $LOCAL --diff $BASE $REMOTE --diff $LOCAL $BASE $REMOTE --output $MERGED
    ;cmd = meld --diff $BASE $LOCAL --diff $BASE $REMOTE --diff $LOCAL $BASE $REMOTE --output $MERGED
    ; MJ's cmd:
    cmd = meld --auto-merge $LOCAL $BASE $REMOTE --output $MERGED --diff $LOCAL $BASE --diff $BASE $REMOTE
    ;keepBackup = false
[mergetool "nvr"]
    cmd = nvr -s -d $LOCAL $BASE $REMOTE $MERGED -c 'wincmd J | wincmd ='
;[mergetool]
    ;keepBackup = false
[core]
    ;excludesfile = ~/.gitignore  # no point in setting; global default in NIX is ~/.config/git/ignore, in WIN: %USERPROFILE%\git\ignore
    editor = nvim
    ; note the bufhidden=wipe is to work around https://github.com/mhinz/neovim-remote/issues/193 
    ;editor = nvr-tmux --nostart --remote-tab-wait '+setlocal bufhidden=wipe'

    ; decent read on the line ending subject:
    ;  - https://stackoverflow.com/a/48384768
    ;  - https://adaptivepatchwork.com/2012/03/01/mind-the-end-of-your-line/
    ;autocrlf = input
    autocrlf = false
    safecrlf = true
    ;pager = less
    ;pager = diff-so-fancy | less --tabs=4 -RFXS
    ;pager = less --tabs=4 -RFX
    pager = delta
    preloadindex = true
[rerere]
    enabled = true
[pull]
    rebase = true
[push]
    default = simple  # simple is the default since git 2.0
    ; automatically push _annotated_ tags:
    followTags = true
[rebase]
    autoStash = true  ; stashes local changes before rebase, if needed
    autoSquash = true  ; automatically handle the !fixup & !squash commits, see https://thoughtbot.com/blog/autosquashing-git-commits
    updateRefs = true  ; automatically handle stacked branches updates, see https://dev.to/onepoint/git-update-refs-in-a-nutshell-574c
[difftool]
    prompt = true
[difftool "nvr"]
    cmd = nvr -s -d $LOCAL $REMOTE
[diff]
    tool = meld
    ;tool = p4merge
    ;tool = nvr
    ;tool = vimdiff
    renames = true
    colorMoved = default
[pager]
    difftool = false
    ;diff = diff-so-fancy | less --tabs=4 -RFXS --pattern '^(Date|added|deleted|modified): '
[interactive]
    ;diffFilter = diff-so-facy --patch-mode
    diffFilter = delta --color-only --features=interactive
[delta]
    ;side-by-side = true
    line-numbers = true
    ;features = decorations unobtrusive-line-numbers
    features = decorations
    whitespace-error-style = 22 reverse
    hyperlinks = true
    navigate = true  # use n and N to move between diff sections
    light = false
    minus-style                   = bold red
    minus-non-emph-style          = bold red
    minus-emph-style              = bold reverse red
    minus-empty-line-marker-style = normal "#3f0001"
    plus-style                    = bold green
    plus-non-emph-style           = bold green
    plus-emph-style               = bold reverse green

[delta "interactive"]
    keep-plus-minus-markers = false

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none
    hunk-header-decoration-style = cyan box ul

[delta "unobtrusive-line-numbers"]
    line-numbers = true
    line-numbers-minus-style = "#444444"
    line-numbers-zero-style = "#444444"
    line-numbers-plus-style = "#444444"
    line-numbers-left-format = "{nm:>4}┊"
    line-numbers-right-format = "{np:>4}│"
    line-numbers-left-style = blue
    line-numbers-right-style = blue
[alias]
    commt = commit
    st = status
    com = commit
    au = add -u
    a = add
    b = branch -avv
    aa = add --all
    rvrt = revert
    di-staged = diff --cached
    di-stged = diff --cached
    distaged = diff --cached
    distged = diff --cached

    di = diff
    dif = diff

    di-stashed = difftool --dir-diff stash@{0}^ stash@{0}
    di-stshed = difftool --dir-diff stash@{0}^ stash@{0}
    distashed = difftool --dir-diff stash@{0}^ stash@{0}
    distshed = difftool --dir-diff stash@{0}^ stash@{0}

    dd = difftool --dir-diff
    showtool = "!showci () { rev=${1:-HEAD}; git difftool --dir-diff $rev~1 $rev; }; showci $1"
    squash = "!sqash () { rev=$1; echo "$rev" | grep -Eq '^[0-9]+$' && [ "$rev" -gt 1 -a "$rev" -lt 10 ] || return 1; git rebase -i HEAD~$rev; }; sqash $1"
    stash-unapply = !git stash show -p | git apply -R
    co = checkout
    cp = cherry-pick
    rb = rebase
    rbo = "!rb_origin () { b=${1:-$(git rev-parse --abbrev-ref HEAD)}; git fetch origin && git rebase origin/$b; }; rb_origin $1"
    rbu = "!rb_upstream () { b=${1:-$(git rev-parse --abbrev-ref HEAD)}; git fetch upstream && git rebase upstream/$b; }; rb_upstream $1"
    rst = reset
    rsto = "!rst_origin () { b=${1:-$(git rev-parse --abbrev-ref HEAD)}; git fetch origin && git reset origin/$b; }; rst_origin $1"
    rstoh = "!rst_origin_hard () { b=${1:-$(git rev-parse --abbrev-ref HEAD)}; git fetch origin && git reset --hard origin/$b; }; rst_origin_hard $1"
    rstu = "!rst_upstream () { b=${1:-$(git rev-parse --abbrev-ref HEAD)}; git fetch upstream && git reset upstream/$b; }; rst_upstream $1"
    rstuh = "!rst_upstream_hard () { b=${1:-$(git rev-parse --abbrev-ref HEAD)}; git fetch upstream && git reset --hard upstream/$b; }; rst_upstream_hard $1"
    fe = fetch --prune --tags --all
    pul = pull
    desc = describe
    lg = log -i --all --graph --source --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'\n --abbrev-commit --date=relative
    pushf = push --force-with-lease
    puhs = push

    commit-undo = reset --soft HEAD~1
    undo-commit = reset --soft HEAD~1
    uncommit =    reset --soft HEAD~1
    #  TODO: this doesn't follow branch, does it?:
    reset-to-index = !git fetch origin && git reset --hard origin/HEAD
    rst-to-index =   !git fetch origin && git reset --hard origin/HEAD

    ;stashtofile = !git stash && git stash show -p stash@{0} > /tmp/stashfile.git && git stash pop
    stashtofile = "!stof () { _stash=$(git config --local remote.origin.url) || return 1; _stash=/tmp/${_stash##*/}.stash || return 1; _token=6c1372ce93186e7957cd299179b2ddf6308cc244; git stash save $_token > /dev/null || return 1; if git stash list | grep -q $_token; then git stash show -p stash@{0} > $_stash && git stash pop && echo && echo stashfile @ [$_stash]; else echo && echo nothing to stash; fi; }; stof"

    ;stashtofile-pick = !git stash --patch && git stash show -p stash@{0} > /tmp/stashfile.git && git stash pop
    stashtofile-pick = "!stof () { _stash=$(git config --local remote.origin.url) || return 1; _stash=/tmp/${_stash##*/}.picked.stash || return 1; _token=6c1372ce93186e7957cd299179b2ddf6308cc245; git stash save --patch $_token || return 1; if git stash list | grep -q $_token; then git stash show -p stash@{0} > $_stash && git stash pop && echo && echo stashfile @ [$_stash]; else echo && echo nothing to stash; fi; }; stof"
    stash-pick = stash --patch
    show-stashed = stash show -p stash@{0}
    stashed-show = stash show -p stash@{0}
    ;stashdrop = !git stash && git stash drop
    stashdrop = "!stshdrp () { _stash=$(git config --local remote.origin.url) || return 1; _stash=/tmp/${_stash##*/}.dropped.stash || return 1; _token=6c1372ce93186e7957cd299179b2ddf6308cc246; git stash save $_token > /dev/null || return 1; if git stash list | grep -q $_token; then git stash show -p stash@{0} > $_stash && git stash drop && echo && echo stashfile backed @ [$_stash]; else echo && echo nothing to stash; fi; }; stshdrp"
    stashunstaged = "!stshustgd () { if ! git commit -m 'chore: temp committing staged changes'; then echo && echo nothing staged && return 1; fi; git add . || return 1; git stash save 'unstaged files stash' > /dev/null || return 1; git reset --soft HEAD^; }; stshustgd"
    keepstaged = !git stash save --keep-index

    new-branch = checkout -b
    branch-new = checkout -b
    branch-delete = "!brnchdlt () { b=$1; git branch -D "$b" && git push origin --delete "$b"; }; brnchdlt $1"  # delete branch locally & on the remote
    ;branch-delete = branch -D -r -f  # delete branch locally & on the remote
    delete-branch = branch-delete

[gitflow "branch"]
    master = master
    develop = develop
[gitflow "prefix"]
    feature = feature/
    release = release/
    hotfix = hotfix/
    support = support/
    versiontag =

; color bits from https://github.com/so-fancy/diff-so-fancy:
[color]
    ui = true
[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22
[color "diff"]
    meta = 11
    frag = magenta bold
    commit = yellow bold
    old = red bold
    new = green bold
    whitespace = red reverse
[svn]
    pushmergeinfo = true
[filter "lfs"]
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
    clean = git-lfs clean -- %f
